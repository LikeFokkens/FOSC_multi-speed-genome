import sys, os, argparse

# import tools sets:
# get path of this script, assume tools are in directory 'tools/' in the parent directory of this code
parent_dir  = os.path.dirname(os.path.abspath(os.path.dirname(sys.argv[0])))
PATH_PYTHON_TOOLS = parent_dir+'/tools/'

print(parent_dir)

if not os.path.exists(parent_dir+'/tools/'):
	print(parent_dir)
	print("You should put the necessary tools (plot_tools, nucmer_tools, blast_tools, color_tools) in a 'tools' directory in the parent directory of this code:", parent_dir)
	sys.exit()

# If Gnuplot is not installed in default location and not in $PATH, put the path to Gnuplot here. Or better: give the path with -gnupath
GNUPATH           = ''


sys.path.append(PATH_PYTHON_TOOLS)
import plot_tools, nucmer_tools, color_tools, fasta_tools



def parse_args():
	general_parser = plot_tools.argument_parser_for_genome_wide_plots()

	parser = argparse.ArgumentParser(description='Plot presence/absence of a reference genome in other genomes.\
	 Implements Gnuplot --> resulting plots can be tweaked further by adjusting the .gnu files generated by this script.\
	 Implements awk and bedtools when -color_by copynumber. If this script takes ages to run, it may be due to some mistake in awk. If somthing is wrong it just stalls without giving an error of any kind...\
	 BTW, bedtools may do the same. Gnuplot and bedtools should be in $PATH', parents=[general_parser], conflict_handler='resolve')
	
	input_options = parser.add_argument_group('Input options')
	input_options.add_argument("-queryGenomes", dest='Qlist', type = str, nargs = '+', help='List of query genomes (genomes to which the reference genome was compared and which you want to plot)\
		I use get_ordered_species_list_from_newick.py <file_with_tree_in_newick_format> to print(such a list')
	input_options.add_argument("-nameReferenceGenome", dest='Rname', type = str, help='Name of the reference genome')

	#overwrite generic inDir argument
	input_options.add_argument("-inDir", dest='inDir', type = str, help='Name of the directory with the coordinates files generated with nucmer "show-coords".\
		Filename is assumed to be <reference_genome>.vs.<query_genome><postfix> (see -postfix, default = ".nucmer_maxmatch.coords")')
	input_options.add_argument("-inFiles", dest='inFiles', nargs='*', default = None, help='Names of the coordinates files generated with nucmer "show-coords", full path or when -inDir is specified, path from inDir')

	parser.set_defaults(postfix='.nucmer_maxmatch.coords')
	
	
	#Figure settings Presence/absence plots
	output_options = parser.add_argument_group('Output options')
	output_options.add_argument("-minSim", dest='minsim', type=float, default = 90, help='Mimimum percent identity of the alignment to be included in the plot')
	output_options.add_argument("-minLength", dest='minL', type=int, default = 1000, help='Mimimum length of the alignment to be included in the plot')
	output_options.add_argument("-colorBy", dest='color_by', choices = ['identity', 'length'], default = 'identity', help='Whether to color "presence" by \
		percent identity [identity], length of the alignment [length]')

	misc = parser.add_argument_group('MISC options')
	misc.add_argument("-promer", dest='promer', default = False, help="Alignment by promer rather than nucmer", action="store_true")

	args = parser.parse_args()

	if args.Rname == None: 
		print('Please provide the name of the reference genome')
		sys.exit()

	if args.Qlist == None and args.inFiles == None: 
		print('Please provide the list of query genomes, see help (-h) for further suggestions')
		sys.exit()

	
	return args



#get datfiles per Query, for this list of similarities
def get_datfiles(coordsfiles, Rname, name, id2xstart, minsim, minlength, datdirname, color_by = 'identity', postfix = '.nucmer_maxmatch.coords', promer = False):
	
	#parse coords files, get lines to write to datfiles for plotting. 
	#we plot different %identity/similarities in different colors
	dat_fname = datdirname + 'presence_absence_vs_'+Rname+'__minlength'+str(minlength)+'__minsim'+str(minsim)+'_'+name+'.dat'	
	print(dat_fname)

	datfile   = open(dat_fname, 'w')

	for Qindex, coords_fname in enumerate(coordsfiles):
		Qname = coords_fname.split('/')[-1].split('.',)[2]
		datfile.write('#'+str(Qindex)+':'+Qname+'\n') #so that we will always be able to reconstruct to which species a certain Y value belongs

	for Qindex, coords_fname in enumerate(coordsfiles):
		#print('coordfile', coords_fname)
		#coords_fname        = coords_dirname+'/'+Rname+'.vs.'+Qname+postfix
		Qname = coords_fname.split('/')[-1].split('.vs.')[1].split(postfix)
		coords_fname_sorted = ''

		# sort so that the alignments with the heighest alignment length or %identity are plotted last (on top of 'worse' alignments)
		if color_by == 'length':
			coords_fname_sorted = coords_fname + '.Qlength_sorted'
			if not os.path.exists(coords_fname_sorted):
				os.system('export LC_NUMERIC=C\nsort -g -k8,8n '+coords_fname+' > '+coords_fname_sorted)
				
		else:
			coords_fname_sorted = coords_fname + '.PercIdentity_sorted'
			if not os.path.exists(coords_fname_sorted):
				print('sorting...', coords_fname)
				os.system('export LC_NUMERIC=C\nsort -g -k10,10n '+coords_fname+' > '+coords_fname_sorted)
				
		coordslines  = open(coords_fname_sorted).readlines()
		
		#print(Qname, len(coordslines))
		
		# write datfile for plotting
		# format:
		# xstart Y  %identity
		# xend   Y  %identity
		# Y = index of Query genome (corresponding to its position in the tree)
		nregions = 0
		for line in coordslines[5:]:
			data = line.strip().split()
			
			Rstart, Rend = map(int, data[:2])
			Rlen, Qlen   = map(int, data[6:8])
			percIdty     = float(data[9])
			
			Rscaffold = data[11]
			if promer:
				Rscaffold = data[15]
			if Rscaffold in id2xstart:
				if color_by == 'identity':
					if Rlen >= minlength and Qlen >= minlength:
						if percIdty >= minsim:
							datfile.write(str(id2xstart[Rscaffold] + Rstart)+'\t'+str(Qindex+1)+'\t'+str(percIdty)+'\n'+str(id2xstart[Rscaffold] + Rend)+'\t'+str(Qindex+1)+'\t'+str(percIdty)+'\n\n\n')
							nregions += 1
				elif color_by == 'length':
					if Rlen >= minlength and Qlen >= minlength:
						if percIdty >= minsim:
							datfile.write(str(id2xstart[Rscaffold] + Rstart)+'\t'+str(Qindex+1)+'\t'+str(Qlen)+'\n'+str(id2xstart[Rscaffold] + Rend)+'\t'+str(Qindex+1)+'\t'+str(Qlen)+'\n\n\n')
		print(nregions, Qname, coords_fname)

	datfile.close()
	
	return dat_fname



def plot_presence_absence(ordered_list_of_queries, Rname, datfilename, plotdirname, plotname, min_sim, min_length, color_by, idlist, id2xstart, id2length, plotwidth=None, plotheight=None, font = 'Arial,12', xtics = 1000000, palette = '33,13,10'):
	#reference genome
	#Rname = ordered_list_of_queries[0]

	file_prefix = Rname+plotname+'_minlength'+str(min_length)+'_minsim'+str(min_sim)+'_coloredBy'+color_by
	
	#axes range
	lastcontig = idlist[-1]
	maxX = id2xstart[lastcontig] + id2length[lastcontig]

	# set size of the figure
	# gnu = 'set terminal pngcairo size '
	if plotwidth == None: 
		plotwidth  = (0.0002 * maxX)
	if plotheight == None:
		plotheight = (20 * len(ordered_list_of_queries))

	gnu = 'set terminal pngcairo background "white" size '+str(plotwidth)+','+str(plotheight)+' font "'+font+'"\n'
	

	gnu += 'set output "'+plotdirname+'OUTPUT/presence_absence__'+file_prefix+'.png"\n\n'
	
	# define plot dimensions, etc.
	plotwidth = 1
	gnu += 'set grid\n'  # get lines for each tic
	gnu += 'set tics scale 0\n' # no tics other than the grid
	gnu += 'set key outside top center\n'

	# set readable axis labels:
	#X-axis
	gnu += plot_tools.get_default_gnuplot_xtics_lines(idlist, id2xstart, maxX, plotwidth, font, ticdist = 1000000)
	
	#Y-axis
	ylabels = 'set ytics ('
	for Qindex, Qname in enumerate(ordered_list_of_queries):
		ylabels += '"'+Qname.replace('_', '-')+'" '+str(Qindex+1)+', '
	ylabels = ylabels[:-2]+')\n'
	gnu += ylabels+'\n\n'


	gnu += 'set xrange[1:'+str(maxX)+']\n'
	gnu += 'set yrange[0:'+str(len(ordered_list_of_queries) + 1)+']\n'
	if color_by ==  'identity':
		gnu += 'set zrange ['+str(min_sim)+':100]\n'
	else:
		gnu += 'set zrange ['+str(min_length)+':10000000]\n'


	# define color scheme:
	gnu += 'set colorbox default\n'
	gnu += 'set cblabel "'+color_by+'"\n'
	if color_by == 'identity':
		gnu += 'set cbrange ['+str(min_sim)+':100]\n'
	else:
		gnu += 'set cbrange ['+str(min_length)+':50000]\n'
	#gnu += 'unset colorbox\n'
	gnu += 'set pm3d map\n'
	gnu += 'set palette rgb '+palette+'\n\n'

	#plot the data
	gnu += 'set style line 1 palette lw 6 pt 6 ps 0.2\n'
	gnu += '\n\n'

	
	#plot the data
	gnu += 'splot "'+datfilename+'" notitle w l ls 1\n\n\n'
	gnu += 'exit()\n'

	gnufilename = plotdirname+'gnufiles/presence_absence__'+file_prefix+'.gnu'
	gnufile     = open(gnufilename, 'w')
	gnufile.write(gnu)
	gnufile.close()
	print('gnuplot:', os.system(GNUPATH+'gnuplot '+gnufilename))
					





if __name__ == "__main__":

	args = parse_args()
	
	basedir = args.outDir + 'PA_plots/'
	datdir  = args.outDir + 'PA_plots/datfiles/'
	gnudir  = args.outDir + 'PA_plots/gnufiles/'
	plotdir = args.outDir + 'PA_plots/OUTPUT/'
	
	print('output saved in', basedir)
	if not os.path.exists(basedir): os.system('mkdir '+basedir)
	if not os.path.exists(datdir): 	os.system('mkdir '+datdir)
	if not os.path.exists(gnudir):  os.system('mkdir '+gnudir)
	if not os.path.exists(plotdir): os.system('mkdir '+plotdir)

	# get order of the scaffolds in the R genome
	# and their start-positions on the x-axis
	
	idlist = args.included
	if args.presetKeyword != None:
		idlist = plot_tools.keyword_to_contigslist(args.presetKeyword)

	if args.inclUnPos:
		idlist, id2length, id2xstart = plot_tools.get_idlist_id2length_and_id2xstart(args.Rfasta, idlist = idlist)
	else:
		idlist, id2length, id2xstart = plot_tools.get_idlist_id2length_and_id2xstart(args.Rfasta, idlist = idlist, complete_idlist = False)

	print(idlist)

	# write datfiles with regions that are 'present' of minimum length minL, given a certain %identity cutoff 
	coords_files = args.inFiles
	if args.inFiles == None:
		coords_files = []
		
		for Qname in args.Qlist:
			coords_files.append(args.inDir+'/'+args.Rname+'.vs.'+Qname+args.postfix)

	
	datfilename = get_datfiles(coords_files, args.Rname, args.name, id2xstart, args.minsim, args.minL, datdir, color_by = args.color_by,  postfix = args.postfix, promer = args.promer)
	plot_presence_absence(args.Qlist, args.Rname, datfilename, basedir, args.name, args.minsim, args.minL, args.color_by, idlist, id2xstart, id2length, args.figwidth, args.figheight, args.font, args.tics, args.palette)
	
	

