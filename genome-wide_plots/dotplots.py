
''' Set path to gnuplot here '''
PATH_GNUPLOT      = ''#/Applications/gnuplot-4.6.3/src/'
''' Set path to python toolshed '''


import sys, os, argparse, glob

# import tools sets:
# get path of this script, assume tools are in directory 'tools/' in the parent directory of this code
parent_dir  = os.path.dirname(os.path.abspath(os.path.dirname(sys.argv[0])))
PATH_PYTHON_TOOLS = parent_dir+'/tools/'

print(parent_dir)

if not os.path.exists(parent_dir+'/tools/'):
	print(parent_dir)
	print("You sould put the necessary tools (plot_tools, nucmer_tools, blast_tools, color_tools)\
	 in a 'tools' directory in the parent directory of this code: "+parent_dir)
	sys.exit()

# If Gnuplot is not installed in default location and not in $PATH, put the path to Gnuplot here. Or better: give the path with -gnupath
GNUPATH           = ''


sys.path.append(PATH_PYTHON_TOOLS)
import plot_tools, nucmer_tools, color_tools, fasta_tools



def init():
	general_parser = plot_tools.argument_parser_for_genome_wide_plots()

	parser = argparse.ArgumentParser(description='Create a dotplot of an alignment.\
	 Implements Gnuplot --> resulting plots can be tweaked further by adjusting the .gnu files generated by this script.', \
	 parents=[general_parser], conflict_handler='resolve')
	
	input_options = parser.add_argument_group('Input options')
	input_options.add_argument("-genomeX", type = str, help='genome that is to go on the x-axis. Will look for a file <genomeX>.vs.<genomeY><postfix> (see -postfix, default = ".nucmer_maxmatch.coords") in inDir.')
	input_options.add_argument("-genomeY", type = str, help='genome that is to go on the y-axis. Will look for a file  <genomeX>.vs.<genomeY><postfix> (see -postfix, default = ".nucmer_maxmatch.coords") in inDir.')
	input_options.add_argument("-excludeX", type = str, nargs='*', default = [], help='list of contigs (separated by spaces) that you want to exclude from the x-axis.')
	input_options.add_argument("-excludeY", type = str, nargs='*', default = [], help='list of contigs (separated by spaces) that you want to exclude from the y-axis.')
	input_options.add_argument("-includeX", type = str, nargs='*', default = [], help='list of contigs (separated by spaces) that you want to include on the x-axis, all other cotnigs will be excluded.')
	input_options.add_argument("-includeY", type = str, nargs='*', default = [], help='list of contigs (separated by spaces) that you want to include on the y-axis, all other cotnigs will be excluded.')

	#overwrite generic inDir argument
	input_options.add_argument("-inDir", dest='inDir', type = str, help='Name of the directory with the coordinates files generated with nucmer "show-coords".\
		Filename is assumed to be <genomeX>.vs.<genomeY><postfix> (see -postfix, default = ".nucmer_maxmatch.coords")')
	input_options.add_argument("-inFiles", dest='coordsFiles', nargs='*', default = None, help='Names of the coordinates files generated with nucmer "show-coords", full path or when -inDir is specified, path from inDir')

	parser.set_defaults(postfix='.nucmer_maxmatch.coords')
	
	
	#Figure settings Presence/absence plots
	output_options = parser.add_argument_group('Output options')
	output_options.add_argument("-minSim", dest='minSim', type=float, default = 90, help='Mimimum percent identity of the alignment to be included in the plot')
	output_options.add_argument("-minLength", dest='minL', type=int, default = 1000, help='Mimimum length of the alignment to be included in the plot')
	output_options.add_argument("-colorBy", dest='color_by', choices = ['identity', 'length'], default = 'identity', help='Whether to color "presence" by \
		percent identity [identity], length of the alignment [length]')
	output_options.add_argument("-no_diagonal", default = False, action = 'store_true', help='By default this program will try to create a as large as possible diagonal by reorienting scaffolds.')
	output_options.add_argument("-outDir", type=str, default = None, help='Output directory. Files will be saved in outDir/gnufiles, outDir/datfiles, outDir/OUTPUT.', required = True)

	misc = parser.add_argument_group('MISC options')
	misc.add_argument("-promer", dest='promer', default = False, help="Alignment by promer rather than nucmer", action="store_true")

	args = parser.parse_args()

	if args.genomeX != None:
		if args.inDir == None and args.coordsFiles == None:
			print('Please provide the name of the directory, where I can find '+\
			+arg.genomeX+'.vs.'+args.genomeY+args.postfix)
			sys.exit()

		elif args.genomeY != None and args.coordsFiles == None:
			# make dotplot of genomeX.vs.genomeY alignment
			coords_fname = args.inDir+'/'+args.genomeX+'.vs.'+args.genomeY+args.postfix
			if not os.path.exists(coords_fname):
				print(coords_fname+' does not exist')
				sys.exit()
			else:
				args.coordsFiles = [coords_fname]	
			
		else:
			# make dotplots of all genomeX.vs.* alignments found in inDir
			coords_fnames    = glob.glob(inDir+'/'+genomeX+'.vs.*'+postfix)
			if len(coords_fnames) == 0:
				print('Can not find any coords files '+genomeX+'.vs.* in '+args.inDir)
				sys.exit()

			args.coordsFiles = coords_fnames

			
	# create output directories	
	os.system('mkdir -p '+args.outDir)
	os.system('mkdir '+args.outDir + '/datfiles/')
	os.system('mkdir '+args.outDir + '/gnufiles/')
	os.system('mkdir '+args.outDir + '/OUTPUT/')

	return args



def write_datFile(coords_fname, minL, minSim, dat_fname, includeX=[], includeY=[], excludeX=[], excludeY=[], no_diagonal = False, promer = False):
	print('***', excludeX)
	# First line of the coords-file contains the two fastas that were compared
	coordslines = open(coords_fname).readlines()
	Rfasta_fname, Qfasta_fname = coordslines[0].strip().split()
	print(Rfasta_fname, Qfasta_fname)

	# Get order of the scaffolds in the R genome (x-axis)
	# and their start-positions on the x-axis
	R_idlist, R_id2length, R_id2xstart = [], {}, {}

	if len(includeX) > 0: # only include contigs that are listed in includeX
		R_idlist, R_id2length, R_id2xstart = plot_tools.get_idlist_id2length_and_id2xstart(Rfasta_fname, idlist = includeX, size_sorted = False, complete_idlist = False)
		
	elif len(excludeX) > 0: # include all contigs except the ones listed in excludeX
		print('excluding '+str(excludeX))
		R_idlist, R_id2length, R_id2xstart = plot_tools.get_idlist_id2length_and_id2xstart(Rfasta_fname, exclude = set(excludeX))
	
	else: #include all contigs in the fasta file
		R_idlist, R_id2length, R_id2xstart = plot_tools.get_idlist_id2length_and_id2xstart(Rfasta_fname)


	# Get order of the scaffolds in the Q genome (y-axis)
	# and their start-positions on the x-axis
	Q_idlist, Q_id2length, Q_id2xstart = [], {}, {}
	Qscaffold2direction = None
	
	if Rfasta_fname == Qfasta_fname:
		Q_idlist    = R_idlist
		Q_id2length = R_id2length
		Q_id2xstart = R_id2xstart
		
	else:
		if no_diagonal:
			print('####', Qfasta_fname)
			Q_idlist, Q_id2length, Q_id2xstart = plot_tools.get_idlist_id2length_and_id2xstart(Qfasta_fname, idlist = [], size_sorted = True, complete_idlist = True, min_contig_size = 0, splitheader = True, exclude = set([]))
			print('####')
		else:
			#get order of Q scaffolds so we come as close to a diagonal as possible:
			mapped_scaffolds, Qscaffolds_orderedList, Qscaffold2direction = nucmer_tools.get_order_and_direction_of_Qscaffolds__to_get_a_diagonal(coords_fname, R_idlist, outfilename=None, promer = False)
			Q_idlist, Q_id2length, Q_id2xstart = plot_tools.get_idlist_id2length_and_id2xstart(Qfasta_fname, idlist = Qscaffolds_orderedList)


	datfile = open(dat_fname, 'w')
	for line in coordslines[5:]:
		data = line.strip().split()
		#print data
		Rstart, Rend = map(int, data[:2])
		Qstart, Qend = map(int, data[3:5])
		Rlen, Qlen   = map(int, data[6:8])
		if float(data[9]) >= minSim:
			percIdty     = (float(data[9]))# - minsim)/(100.0 - minsim)
			Rscaffold, Qscaffold = data[-2:]
			if Rscaffold in R_id2xstart and Qscaffold in Q_id2xstart:
				if Rlen >= minL and Qlen >= minL:
					#print data[9], float(data[9]) - minsim, 100.0 - minsim, (float(data[9]) - minsim)/(100.0 - minsim), percIdty

					line1 = str(R_id2xstart[Rscaffold] + Rstart)
					line2 = str(R_id2xstart[Rscaffold] + Rend)
					
					if Qscaffold2direction == None or Qscaffold2direction[Qscaffold] == '+':
						line1 += '\t'+str(Q_id2xstart[Qscaffold] + Qstart)
						line2 += '\t'+str(Q_id2xstart[Qscaffold] + Qend)
						
					# if Qscaffold has to plotted in a different direction than it had in the original fastafile, we also have to adjust the coordinates	
					else:
						line1 += '\t'+str(Q_id2xstart[Qscaffold] + Q_id2length[Qscaffold]-Qstart)
						line2 += '\t'+str(Q_id2xstart[Qscaffold] + Q_id2length[Qscaffold]-Qend)
						
					datfile.write(line1+'\t'+str(percIdty)+'\n'+line2+'\t'+str(percIdty)+'\n\n\n')

	datfile.close()
	return R_idlist, R_id2length, R_id2xstart, Q_idlist, Q_id2length, Q_id2xstart, Qscaffold2direction




def write_gnufile(datfilename, outdirname, plotname, min_sim, min_length, R_idlist, R_id2xstart, R_id2length, Q_idlist, Q_id2xstart, Q_id2length, Qscaffold2direction,\
	plotwidth = 1000, plotheight = 1000, scale = True, font = 'Arial,12', xtics = 1000000, palette = '33,13,10'):
	
	#write a file with instructions for gnuplot on how to plot the data:
	file_prefix = plotname+'_minlength'+str(min_length)+'_minsim'+str(min_sim)

	gnulines = 'set terminal pngcairo transparent size '+str(plotwidth)+','+str(plotheight)+' font "'+font+'"\n'
	gnulines += 'set output "'+outdirname+'/OUTPUT/dotplot__'+file_prefix+'.png"\n\n'
	
	#what should be put on the X-axis:
	last_Rscaffold = R_idlist[-1]
	maxX = R_id2xstart[last_Rscaffold] + R_id2length[last_Rscaffold]
	xticlines = plot_tools.get_gnuplot_tic_lines(\
		R_idlist, R_id2xstart, 'x', axis_range = maxX, rotate = True,\
		trim_name = True, readable = False, plotwidth = plotwidth, fontsize = int(font.split(',')[-1]))
		
	gnulines += xticlines


	#what should be put on the Y-axis:
	last_Qscaffold = Q_idlist[-1]
	maxY = Q_id2xstart[last_Qscaffold] + Q_id2length[last_Qscaffold]
	yticlines = plot_tools.get_gnuplot_tic_lines(\
		Q_idlist, Q_id2xstart, 'y', axis_range = maxY, rotate = False,\
		trim_name = True, readable = False, plotwidth = plotheight, fontsize = int(font.split(',')[-1]), name2strand = Qscaffold2direction)

	gnulines += yticlines

	# scale plot
	if scale and maxX != maxY:
		gnulines += '\n#Scale plots:\n'
		if maxX > maxY:
			gnulines += plot_tools.get_gnuline_relativesize_png(maxX, maxY, axis = 'y')
		else:
			gnulines += plot_tools.get_gnuline_relativesize_png(maxY, maxX, axis = 'x')
		gnulines += '\n\n'

	#misc stuff
	gnulines += 'set grid\n'
	gnulines += 'unset key\nset border 0\nset tics scale 0\n\n' 
		
	#label the axes
	gnulines += '\nset xlabel "'+plotname.split('.vs.')[0]+'"\nset ylabel "'+plotname.split('.vs.')[-1].split('.')[0]+'"\n\n'

	#size of the axes
	gnulines += 'set xrange [1:'+str(maxX)+']\n'
	gnulines += 'set yrange [1:'+str(maxY)+']\n\n'
	gnulines += 'set zrange ['+str(min_sim)+':100]\n'

	# define color scheme:
	gnulines += 'set colorbox default\n'
	gnulines += 'set cblabel "%identity"\n'
	gnulines += 'set cbrange ['+str(min_sim)+':100]\n'
	#gnulines += 'set cbtics 0.25\n'
	gnulines += 'set pm3d map\n'
	gnulines += 'set palette rgb '+palette+'\n\n'

	#plot the data
	gnulines += 'set style line 1 palette lw 2 pt 6 ps 0.2\n'
	gnulines += 'splot "'+dat_fname+'" notitle w l ls 1 \n'


	gnulines += '\n\nexit()\n'

	#write instruction for gnuplot to a file:
	gnu_fname = outdirname + '/GNUFILES/'+file_prefix+'.gnu'
	gnufile   = open(gnu_fname, 'w')
	gnufile.write(gnulines)
	gnufile.close()

	return gnu_fname


	
	

if __name__ == "__main__":
	
	args = init()
	for coords_fname in args.coordsFiles:
		
		plotname  = coords_fname.split('/')[-1].split('.coords')[0]
		if args.name != None: plotname = args.name + plotname

		dat_fname = args.outDir+'/datfiles/'+plotname+'__minlength'+str(args.minL)+'__minsim'+str(args.minSim)+'.dat'
		R_idlist, R_id2length, R_id2xstart, Q_idlist, Q_id2length, Q_id2xstart = [],{},{},[],{},{}

		if args.presetKeyword != None:
			args.includeX = plot_tools.keyword_to_contigslist(args.presetKeyword, includeUnposScaffolds = args.inclUnPos)

		R_idlist, R_id2length, R_id2xstart, Q_idlist, Q_id2length, Q_id2xstart, Qscaffold2direction = write_datFile(coords_fname, args.minL, args.minSim, dat_fname, \
				includeX=args.includeX, includeY=args.includeY, excludeX = args.excludeX, excludeY=args.excludeY, no_diagonal = args.no_diagonal, promer = args.promer)
		
		gnu_fname = write_gnufile(dat_fname, args.outDir + '/', plotname, args.minSim, args.minL, R_idlist, R_id2xstart, R_id2length, Q_idlist, Q_id2xstart,Q_id2length, Qscaffold2direction, \
			scale = True, font = 'Arial,12', xtics = 1000000, palette = '33,13,10')
		
		#execute this file to obtain a .png with the plot
		print(gnu_fname)
		print(os.system(PATH_GNUPLOT+'gnuplot '+gnu_fname))

